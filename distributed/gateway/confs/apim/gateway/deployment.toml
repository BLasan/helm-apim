[server]
hostname = {{ .Values.kubernetes.ingress.gateway.hostname | quote }}
node_ip = "$env{NODE_IP}"
server_role = "gateway-worker"
offset = 0

[user_store]
type = {{ .Values.wso2.apim.configurations.userStore.type | quote }}
{{- range $key, $value := .Values.wso2.apim.configurations.userStore.properties }}
{{ $key }} = {{ $value | quote }}
{{- end }}

[super_admin]
username = {{ .Values.wso2.apim.configurations.adminUsername | quote }}
create_admin_account = true
{{- if .Values.wso2.apim.secureVaultEnabled }}
password = "$secret{admin_password}"
{{- else }}
password = {{ .Values.wso2.apim.configurations.adminPassword | quote }}
{{- end }}

[database.shared_db]
type = {{ .Values.wso2.apim.configurations.databases.type | quote }}
url = {{ .Values.wso2.apim.configurations.databases.sharedDB.url | quote }}
username = {{ .Values.wso2.apim.configurations.databases.sharedDB.username | quote }}
{{- if .Values.wso2.apim.secureVaultEnabled }}
password = "$secret{shared_db_password}"
{{- else }}
password = {{ .Values.wso2.apim.configurations.databases.sharedDB.password | quote }}
{{- end }}
driver = {{ .Values.wso2.apim.configurations.databases.jdbc.driver | quote }}

[database.shared_db.pool_options]
{{- range $key, $value := .Values.wso2.apim.configurations.databases.sharedDB.poolParameters }}
{{ $key }} = "{{ $value }}"
{{- end }}

{{- if .Values.wso2.apim.configurations.security.keystores.primary.enabled }}
[keystore.primary]
type = "JKS"
file_name = {{ .Values.wso2.apim.configurations.security.keystores.primary.name | quote }}
alias = {{ .Values.wso2.apim.configurations.security.keystores.primary.alias | quote }}
{{- if .Values.wso2.apim.secureVaultEnabled }}
password = "$secret{keystore_password}"
key_password = "$secret{keystore_key_password}"
{{- else }}
password = {{ .Values.wso2.apim.configurations.security.keystores.primary.password | quote }}
key_password = {{ .Values.wso2.apim.configurations.security.keystores.primary.keyPassword | quote }}
{{- end }}
{{- end }}
{{- println }}

{{- if .Values.wso2.apim.configurations.security.keystores.tls.enabled }}
[keystore.tls]
type = "JKS"
file_name = {{ .Values.wso2.apim.configurations.security.keystores.tls.name | quote }}
alias = {{ .Values.wso2.apim.configurations.security.keystores.tls.alias | quote }}
{{- if .Values.wso2.apim.secureVaultEnabled }}
password = "$secret{ssl_keystore_password}"
key_password = "$secret{ssl_keystore_key_password}"
{{- else }}
password = {{ .Values.wso2.apim.configurations.security.keystores.tls.password | quote }}
key_password = {{ .Values.wso2.apim.configurations.security.keystores.tls.keyPassword | quote }}
{{- end }}
{{- end }}
{{- println }}

{{- if .Values.wso2.apim.configurations.security.keystores.internal.enabled }}
[keystore.internal]  
type = "JKS"
file_name = {{ .Values.wso2.apim.configurations.security.keystores.internal.name | quote }}
alias = {{ .Values.wso2.apim.configurations.security.keystores.internal.alias | quote }}
{{- if .Values.wso2.apim.secureVaultEnabled }}
password = "$secret{internal_keystore_password}"
key_password = "$secret{internal_keystore_key_password}"
{{- else }}
password = {{ .Values.wso2.apim.configurations.security.keystores.internal.password | quote }}
key_password = {{ .Values.wso2.apim.configurations.security.keystores.internal.keyPassword | quote }}
{{- end }}
{{- end }}
{{- println }}

[truststore]
type = "JKS"
file_name = {{ .Values.wso2.apim.configurations.security.truststore.name | quote }}
{{- if .Values.wso2.apim.secureVaultEnabled }}
password = "$secret{truststore_password}"
{{- else }}
password = {{ .Values.wso2.apim.configurations.security.truststore.password | quote }}
{{- end }}

# Caches
[apim.cache.gateway_token]
enable = {{ .Values.wso2.apim.configurations.cache.gatewayToken.enabled }}
expiry_time = {{ .Values.wso2.apim.configurations.cache.gatewayToken.expiryTime | quote }}

[apim.cache.resource]
enable = {{ .Values.wso2.apim.configurations.cache.resource.enabled }}
expiry_time = {{ .Values.wso2.apim.configurations.cache.resource.expiryTime | quote }}

[apim.cache.km_token]
enable = {{ .Values.wso2.apim.configurations.cache.kmToken.enabled }}
expiry_time = {{ .Values.wso2.apim.configurations.cache.kmToken.expiryTime | quote }}

[apim.cache.recent_apis]
enable = {{ .Values.wso2.apim.configurations.cache.recentApis.enabled }}

[apim.cache.scopes]
enable = {{ .Values.wso2.apim.configurations.cache.scopes.enabled }}

[apim.cache.publisher_roles]
enable = {{ .Values.wso2.apim.configurations.cache.publisherRoles.enabled }}

[apim.cache.jwt_claim]
enable = {{ .Values.wso2.apim.configurations.cache.jwtClaim.enabled }}
expiry_time = {{ .Values.wso2.apim.configurations.cache.jwtClaim.expiryTime | quote }}

[apim.cache.tags]
enable = {{ .Values.wso2.apim.configurations.cache.tags.enabled }}
expiry_time = {{ .Values.wso2.apim.configurations.cache.tags.expiryTime | quote }}

[apim.analytics]
{{- if .Values.wso2.apim.configurations.analytics.enabled }}
enable = true
{{- if .Values.wso2.apim.configurations.analytics.storeApiUrl }}
store_api_url = {{ .Values.wso2.apim.configurations.analytics.storeApiUrl | quote }}
{{- end }}
{{- if .Values.wso2.apim.configurations.analytics.username }}
username = {{ .Values.wso2.apim.configurations.analytics.username | quote }}
{{- end }}
{{- if .Values.wso2.apim.configurations.analytics.password }}
{{- if .Values.wso2.apim.secureVaultEnabled }}
password = $secret{analytics_password}
{{- else }}
password = {{ .Values.wso2.apim.configurations.analytics.password | quote }}
{{- end }}
{{- end }}
{{- if .Values.wso2.apim.configurations.analytics.receiverUsername }}
receiver_username = {{ .Values.wso2.apim.configurations.analytics.receiverUsername | quote }}
{{- end }}
{{- if .Values.wso2.apim.configurations.analytics.receiverPassword }}
{{- if .Values.wso2.apim.secureVaultEnabled }}
password = $secret{analytics_receiver_password}
{{- else }}
receiver_password = {{ .Values.wso2.apim.configurations.analytics.receiverPassword | quote }}
{{- end }}
{{- end }}
{{- if .Values.wso2.apim.configurations.analytics.storeApiUsername }}
store_api_username = {{ .Values.wso2.apim.configurations.analytics.storeApiUsername | quote }}
{{- end }}
{{- if .Values.wso2.apim.configurations.analytics.storeApiPassword }}
{{- if .Values.wso2.apim.secureVaultEnabled }}
store_api_password = $secret{analytics_store_api_password}
{{- else }}
store_api_password = {{ .Values.wso2.apim.configurations.analytics.storeApiPassword | quote }}
{{- end }}
{{- end }}
{{- else }}
enable = false
{{- end }}
{{- println }}

{{- if .Values.wso2.apim.configurations.analytics.enabled }}
[[apim.analytics.url_group]]
{{- if .Values.wso2.apim.configurations.analytics.analyticsUrls }}
{{- $len := add (len .Values.wso2.apim.configurations.analytics.analyticsUrls) -1 }}
analytics_url = [{{ range $index, $element := .Values.wso2.apim.configurations.analytics.analyticsUrls }}"{{ $element }}"{{ if ne $index $len }},{{ end }}{{ end}}]
{{- end }}
{{- if .Values.wso2.apim.configurations.analytics.analyticsAuthUrls }}
{{- $len := add (len .Values.wso2.apim.configurations.analytics.analyticsAuthUrls) -1 }}
analytics_url = [{{ range $index, $element := .Values.wso2.apim.configurations.analytics.analyticsAuthUrls }}"{{ $element }}"{{ if ne $index $len }},{{ end }}{{ end}}]
{{- end }}
{{- if .Values.wso2.apim.configurations.analytics.eventPublishingType }}
type = {{ .Values.wso2.apim.configurations.analytics.eventPublishingType | quote }}
{{- end }}
{{- end }}

[transport.http]
properties.port = 9763
properties.proxyPort = 80

[transport.https]
properties.port = 9443
properties.proxyPort = 443

[apim.key_manager]
{{- if .Values.wso2.apim.configurations.iskm.enabled }}
type = "WSO2-IS"
service_url = "https://{{ .Values.wso2.apim.configurations.iskm.serviceName }}:{{ .Values.wso2.apim.configurations.iskm.servicePort }}/services/"
{{- else }}
service_url = "https://{{ .Values.wso2.apim.configurations.km.serviceName }}:{{ .Values.wso2.apim.configurations.km.servicePort }}/services/"
{{- end }}
username= "$ref{super_admin.username}"
password= "$ref{super_admin.password}"

{{ if .Values.wso2.apim.configurations.iskm.enabled }}
[oauth.grant_type.token_exchange]
enable = false
allow_refresh_tokens = true
iat_validity_period = "1h"
{{- end }}

# JWT Generation
{{- if .Values.wso2.apim.configurations.jwt.enabled }}
[apim.jwt]
enable = {{ .Values.wso2.apim.configurations.jwt.enabled }}
encoding = {{ .Values.wso2.apim.configurations.jwt.encoding | quote }} # base64,base64url
generator_impl = {{ .Values.wso2.apim.configurations.jwt.generatorImpl | quote }}
claim_dialect = {{ .Values.wso2.apim.configurations.jwt.claimDialect | quote }}
header = {{ .Values.wso2.apim.configurations.jwt.header | quote }}
signing_algorithm = {{ .Values.wso2.apim.configurations.jwt.signingAlgorithm | quote }}
enable_user_claims = {{ .Values.wso2.apim.configurations.jwt.enableUserClaims }}
claims_extractor_impl = {{ .Values.wso2.apim.configurations.jwt.claimsExtractorImpl | quote }}
{{- end }}

{{- if .Values.wso2.apim.configurations.oauthConfig.enabled }}
[apim.oauth_config]
{{- if .Values.wso2.apim.configurations.oauthConfig.revokeEndpoint }}
revoke_endpoint = "{{ .Values.wso2.apim.configurations.oauthConfig.revokeEndpoint }}/oauth2/revoke"
{{- end }}
{{- if .Values.wso2.apim.configurations.oauthConfig.enableOutboundAuthHeader }}
enable_outbound_auth_header = {{ .Values.wso2.apim.configurations.oauthConfig.enableOutboundAuthHeader }}
{{- end }}
{{- if .Values.wso2.apim.configurations.oauthConfig.authHeader }}
auth_header = {{ .Values.wso2.apim.configurations.oauthConfig.authHeader }}
{{- end }}
{{- if .Values.wso2.apim.configurations.oauthConfig.enableTokenEncryption }}
enable_token_encryption = {{ .Values.wso2.apim.configurations.oauthConfig.enableTokenEncryption }}
{{- end }}
{{- if .Values.wso2.apim.configurations.oauthConfig.enableTokenHashing }}
enable_token_hashing = {{ .Values.wso2.apim.configurations.oauthConfig.enableTokenHashing }}
{{- end }}
{{- end }}

[apim.cors]
enable = {{ .Values.wso2.apim.configurations.cors.enabled }}
allow_origins = {{ toJson .Values.wso2.apim.configurations.cors.allowOrigins }}
allow_methods = {{ toJson .Values.wso2.apim.configurations.cors.allowMethods }}
allow_headers = {{ toJson .Values.wso2.apim.configurations.cors.allowHeaders }}
allow_credentials = {{ .Values.wso2.apim.configurations.cors.allowCredentials }}

# Traffic Manager configurations
[apim.throttling]
service_url = "https://{{ .Values.wso2.apim.configurations.throttling.serviceUrl }}:{{ add 9443 .Values.wso2.apim.configurations.throttling.portOffset }}/services/"
{{- $len := add (len .Values.wso2.apim.configurations.throttling.urls) -1 }}
throttle_decision_endpoints = [{{ range $index, $element := $.Values.wso2.apim.configurations.throttling.urls }}"tcp://{{ $element }}:{{ add 5672 $.Values.wso2.apim.configurations.throttling.portOffset }}"{{ if ne $index $len }},{{ end }}{{ end}}]
enable_unlimited_tier = {{ .Values.wso2.apim.configurations.throttling.unlimitedTier }}
enable_header_based_throttling = {{ .Values.wso2.apim.configurations.throttling.headerBasedThrottling }}
enable_jwt_claim_based_throttling = {{ .Values.wso2.apim.configurations.throttling.jwtClaimBasedThrottling }}
enable_query_param_based_throttling = {{ .Values.wso2.apim.configurations.throttling.queryParamBasedThrottling }}

{{ range $index, $url := .Values.wso2.apim.configurations.throttling.urls }}
[[apim.throttling.url_group]]
traffic_manager_urls = ["tcp://{{ $url }}:{{ add 9611 $.Values.wso2.apim.configurations.throttling.portOffset }}"]
traffic_manager_auth_urls = ["ssl://{{ $url }}:{{ add 9711 $.Values.wso2.apim.configurations.throttling.portOffset }}"]
type = "loadbalance"
{{ end }}

{{ range $index, $url := .Values.wso2.apim.configurations.resourceAccessControl }}
[[resource.access_control]]
context = {{ .context | quote }}
secure = {{ .secure }}
http_method = {{ .httpMethod | quote }}
{{- if .permissions }}
permissions = {{ .permissions | quote }}
{{ end }}
{{ end }}

{{- range .Values.wso2.apim.configurations.eventHandlers }}
[[event_handler]]
name = "{{ .name }}"
{{- $len := add (len .subscriptions) -1 }}
subscriptions = [{{ range $index, $element := .subscriptions }}"{{ $element }}"{{ if ne $index $len }},{{ end }}{{ end}}]
{{- end }}

[service_provider]
sp_name_regex = {{ .Values.wso2.apim.configurations.serviceProvider.spNameRegex | quote }}

{{- if .Values.wso2.apim.configurations.openTracer.enabled }}
[apim.open_tracer]
remote_tracer.enable = {{ .Values.wso2.apim.configurations.openTracer.enabled }}
remote_tracer.name = {{ .Values.wso2.apim.configurations.openTracer.name | quote }}
remote_tracer.properties.hostname = {{ .Values.wso2.apim.configurations.openTracer.properties.hostname | quote }}
remote_tracer.properties.port = {{ .Values.wso2.apim.configurations.openTracer.properties.port | quote }}
{{- end }}

[transport.passthru_https.sender.parameters]
HostnameVerifier = {{ .Values.wso2.apim.configurations.transport.passthru_https.sender.parameters.hostnameVerifier | quote }}

{{- if .Values.wso2.apim.secureVaultEnabled }}
[secrets]
admin_password = {{ .Values.wso2.apim.configurations.adminPassword | quote }}
{{- if .Values.wso2.apim.configurations.security.keystores.primary.enabled }}
keystore_password = {{ .Values.wso2.apim.configurations.security.keystores.primary.password | quote }}
keystore_key_password = {{ .Values.wso2.apim.configurations.security.keystores.primary.keyPassword | quote }}
{{ end }}
{{- if .Values.wso2.apim.configurations.security.keystores.tls.enabled }}
ssl_keystore_password = {{ .Values.wso2.apim.configurations.security.keystores.tls.password | quote }}
ssl_keystore_key_password = {{ .Values.wso2.apim.configurations.security.keystores.tls.keyPassword | quote }}
{{ end }}
{{- if .Values.wso2.apim.configurations.security.keystores.internal.enabled }}
internal_keystore_password = {{ .Values.wso2.apim.configurations.security.keystores.internal.password | quote }}
internal_keystore_key_password = {{ .Values.wso2.apim.configurations.security.keystores.internal.keyPassword | quote }}
{{ end }}
truststore_password = {{ .Values.wso2.apim.configurations.security.truststore.password | quote }}
shared_db_password = {{ .Values.wso2.apim.configurations.databases.sharedDB.password | quote}}
{{- if .Values.wso2.apim.configurations.analytics.password }}
analytics_password = {{ .Values.wso2.apim.configurations.analytics.password | quote }}
{{- end }}
{{- if .Values.wso2.apim.configurations.analytics.receiverPassword }}
analytics_receiver_password = {{ .Values.wso2.apim.configurations.analytics.receiverPassword | quote }}
{{- end }}
{{- if .Values.wso2.apim.configurations.analytics.storeApiPassword }}
analytics_store_api_password = {{ .Values.wso2.apim.configurations.analytics.storeApiPassword | quote }}
{{- end }}
{{- end }}
