[server]
hostname = "{{ .Values.kubernetes.ingress.controlPlane.hostname }}"
node_ip = "$env{NODE_IP}"
offset = {{ .Values.wso2.apim.portOffset }}
mode = "single" #single or ha
base_path = "${carbon.protocol}://${carbon.host}:${carbon.management.port}"
server_role = "default"

[user_store]
type = {{ .Values.wso2.apim.configurations.userStore.type | quote }}
{{- range $key, $value := .Values.wso2.apim.configurations.userStore.properties }}
{{ $key }} = {{ $value | quote }}
{{- end }}

[super_admin]
username = {{ .Values.wso2.apim.configurations.adminUsername | quote }}
{{- if .Values.wso2.apim.secureVaultEnabled }}
password = "$secret{admin_password}"
{{- else }}
password = {{ .Values.wso2.apim.configurations.adminPassword | quote }}
{{- end }}
create_admin_account = true

[database.apim_db]
type = {{ .Values.wso2.apim.configurations.databases.type | quote }}
url = {{ .Values.wso2.apim.configurations.databases.apimDB.url | quote }}
username = {{ .Values.wso2.apim.configurations.databases.apimDB.username | quote }}
{{- if .Values.wso2.apim.secureVaultEnabled }}
password = "$secret{apim_db_password}"
{{- else }}
password = {{ .Values.wso2.apim.configurations.databases.apimDB.password | quote }}
{{- end }}
driver = {{ .Values.wso2.apim.configurations.databases.jdbc.driver | quote }}

[database.apim_db.pool_options]
{{- range $key, $value := .Values.wso2.apim.configurations.databases.apimDB.poolParameters }}
{{ $key }} = "{{ $value }}"
{{- end }}

[database.shared_db]
type = {{ .Values.wso2.apim.configurations.databases.type | quote }}
url = {{ .Values.wso2.apim.configurations.databases.sharedDB.url | quote }}
username = {{ .Values.wso2.apim.configurations.databases.sharedDB.username | quote }}
{{- if .Values.wso2.apim.secureVaultEnabled }}
password = "$secret{shared_db_password}"
{{- else }}
password = {{ .Values.wso2.apim.configurations.databases.sharedDB.password | quote }}
{{- end }}
driver = {{ .Values.wso2.apim.configurations.databases.jdbc.driver | quote }}

[database.shared_db.pool_options]
{{- range $key, $value := .Values.wso2.apim.configurations.databases.sharedDB.poolParameters }}
{{ $key }} = "{{ $value }}"
{{- end }}
{{- println }}

{{- if .Values.wso2.apim.configurations.security.keystores.primary.enabled }}
[keystore.primary]
type = "JKS"
file_name = {{ .Values.wso2.apim.configurations.security.keystores.primary.name | quote }}
alias = {{ .Values.wso2.apim.configurations.security.keystores.primary.alias | quote }}
{{- if .Values.wso2.apim.secureVaultEnabled }}
password = "$secret{keystore_password}"
key_password = "$secret{keystore_key_password}"
{{- else }}
password = {{ .Values.wso2.apim.configurations.security.keystores.primary.password | quote }}
key_password = {{ .Values.wso2.apim.configurations.security.keystores.primary.keyPassword | quote }}
{{- end }}
{{- end }}
{{- println }}

{{- if .Values.wso2.apim.configurations.security.keystores.tls.enabled }}
[keystore.tls]
type = "JKS"
file_name = {{ .Values.wso2.apim.configurations.security.keystores.tls.name | quote }}
alias = {{ .Values.wso2.apim.configurations.security.keystores.tls.alias | quote }}
{{- if .Values.wso2.apim.secureVaultEnabled }}
password = "$secret{ssl_keystore_password}"
key_password = "$secret{ssl_keystore_key_password}"
{{- else }}
password = {{ .Values.wso2.apim.configurations.security.keystores.tls.password | quote }}
key_password = {{ .Values.wso2.apim.configurations.security.keystores.tls.keyPassword | quote }}
{{- end }}
{{- end }}
{{- println }}

{{- if .Values.wso2.apim.configurations.security.keystores.internal.enabled }}
[keystore.internal]  
type = "JKS"
file_name = {{ .Values.wso2.apim.configurations.security.keystores.internal.name | quote }}
alias = {{ .Values.wso2.apim.configurations.security.keystores.internal.alias | quote }}
{{- if .Values.wso2.apim.secureVaultEnabled }}
password = "$secret{internal_keystore_password}"
key_password = "$secret{internal_keystore_key_password}"
{{- else }}
password = {{ .Values.wso2.apim.configurations.security.keystores.internal.password | quote }}
key_password = {{ .Values.wso2.apim.configurations.security.keystores.internal.keyPassword | quote }}
{{- end }}
{{- end }}
{{- println }}

[truststore]
type = "JKS"
file_name = {{ .Values.wso2.apim.configurations.security.truststore.name | quote }}
{{- if .Values.wso2.apim.secureVaultEnabled }}
password = "$secret{truststore_password}"
{{- else }}
password = {{ .Values.wso2.apim.configurations.security.truststore.password | quote }}
{{- end }}
{{- println }}

{{- range $i, $env := .Values.wso2.apim.configurations.gateway.environments }}
[[apim.gateway.environment]]
name = {{ $env.name | quote }}
type = {{ $env.type | quote }}
display_in_api_console = {{ $env.displayInApiConsole }}
description = {{ $env.description | quote }}
show_as_token_endpoint_url = {{ $env.showAsTokenEndpointUrl }}
service_url = "https://{{ $env.serviceName }}:{{ $env.servicePort }}/services/"
username= "${admin.username}"
password= "${admin.password}"
ws_endpoint = "ws://{{ $env.wsHostname }}"
wss_endpoint = "wss://{{ $env.wsHostname }}"
http_endpoint = "http://{{ $env.httpHostname }}"
https_endpoint = "https://{{ $env.httpHostname }}"
{{- end }}
{{- println }}

[oauth.token_cleanup]
enable = {{ .Values.wso2.apim.configurations.oauth.tokenCleanup.enable }}

# Caches
[apim.cache.gateway_token]
enable = {{ .Values.wso2.apim.configurations.cache.gatewayToken.enabled }}
expiry_time = {{ .Values.wso2.apim.configurations.cache.gatewayToken.expiryTime | quote }}

[apim.cache.resource]
enable = {{ .Values.wso2.apim.configurations.cache.resource.enabled }}
expiry_time = {{ .Values.wso2.apim.configurations.cache.resource.expiryTime | quote }}

[apim.cache.km_token]
enable = {{ .Values.wso2.apim.configurations.cache.kmToken.enabled }}
expiry_time = {{ .Values.wso2.apim.configurations.cache.kmToken.expiryTime | quote }}

[apim.cache.recent_apis]
enable = {{ .Values.wso2.apim.configurations.cache.recentApis.enabled }}

[apim.cache.scopes]
enable = {{ .Values.wso2.apim.configurations.cache.scopes.enabled }}

[apim.cache.publisher_roles]
enable = {{ .Values.wso2.apim.configurations.cache.publisherRoles.enabled }}

[apim.cache.jwt_claim]
enable = {{ .Values.wso2.apim.configurations.cache.jwtClaim.enabled }}
expiry_time = {{ .Values.wso2.apim.configurations.cache.jwtClaim.expiryTime | quote }}

[apim.cache.tags]
enable = {{ .Values.wso2.apim.configurations.cache.tags.enabled }}
expiry_time = {{ .Values.wso2.apim.configurations.cache.tags.expiryTime | quote }}

[transport.http]
properties.port = 9763
properties.proxyPort = 80

[transport.https]
properties.port = 9443
properties.proxyPort = 443

[apim.key_manager]
{{- if .Values.wso2.apim.configurations.iskm.enabled }}
type = "WSO2-IS"
service_url = "https://{{ .Values.wso2.apim.configurations.iskm.serviceName }}:{{ .Values.wso2.apim.configurations.iskm.servicePort }}/services/"
{{- else }}
service_url = "https://{{ template "apim-helm-cp.resource.prefix" . }}-service:{{ add 9443 .Values.wso2.apim.portOffset }}/services/"
{{- end }}
username= "$ref{super_admin.username}"
password= "$ref{super_admin.password}"

{{- if .Values.wso2.apim.configurations.idp.enabled }}
[apim.idp]
server_url = {{ .Values.wso2.apim.configurations.idp.serverUrl | quote }}
authorize_endpoint = {{ .Values.wso2.apim.configurations.idp.authorizeEndpoint | quote }}
oidc_logout_endpoint = {{ .Values.wso2.apim.configurations.idp.oidc.logoutEndpoint | quote }}
oidc_check_session_endpoint = {{ .Values.wso2.apim.configurations.idp.oidc.sessionEndpoint | quote }}
{{- end }}

{{- if .Values.wso2.apim.configurations.oauthConfig.enabled }}
[apim.oauth_config]
{{- if .Values.wso2.apim.configurations.oauthConfig.revokeEndpoint }}
revoke_endpoint = "{{ .Values.wso2.apim.configurations.oauthConfig.revokeEndpoint }}/oauth2/revoke"
{{- end }}
{{- if .Values.wso2.apim.configurations.oauthConfig.enableOutboundAuthHeader }}
enable_outbound_auth_header = {{ .Values.wso2.apim.configurations.oauthConfig.enableOutboundAuthHeader }}
{{- end }}
{{- if .Values.wso2.apim.configurations.oauthConfig.authHeader }}
auth_header = {{ .Values.wso2.apim.configurations.oauthConfig.authHeader }}
{{- end }}
{{- if .Values.wso2.apim.configurations.oauthConfig.enableTokenEncryption }}
enable_token_encryption = {{ .Values.wso2.apim.configurations.oauthConfig.enableTokenEncryption }}
{{- end }}
{{- if .Values.wso2.apim.configurations.oauthConfig.enableTokenHashing }}
enable_token_hashing = {{ .Values.wso2.apim.configurations.oauthConfig.enableTokenHashing }}
{{- end }}
{{- end }}

[apim.devportal]
url = "https://{{ .Values.kubernetes.ingress.controlPlane.hostname }}/devportal"
{{- if .Values.wso2.apim.configurations.devportal.enableApplicationSharing }}
enable_application_sharing = {{ .Values.wso2.apim.configurations.devportal.enableApplicationSharing }}
{{- end }}
{{- if .Values.wso2.apim.configurations.devportal.applicationSharingType }}
application_sharing_type = {{ .Values.wso2.apim.configurations.devportal.applicationSharingType }}
{{- end }}
{{- if .Values.wso2.apim.configurations.devportal.applicationSharingImpl }}
application_sharing_impl = {{ .Values.wso2.apim.configurations.devportal.applicationSharingImpl }}
{{- end }}
{{- if .Values.wso2.apim.configurations.devportal.displayMultipleVersions }}
display_multiple_versions = {{ .Values.wso2.apim.configurations.devportal.displayMultipleVersions }}
{{- end }}
{{- if .Values.wso2.apim.configurations.devportal.displayDeprecatedApis }}
display_deprecated_apis = {{ .Values.wso2.apim.configurations.devportal.displayDeprecatedApis }}
{{- end }}
{{- if .Values.wso2.apim.configurations.devportal.enableComments }}
enable_comments = {{ .Values.wso2.apim.configurations.devportal.enableComments }}
{{- end }}
{{- if .Values.wso2.apim.configurations.devportal.enableRatings }}
enable_ratings = {{ .Values.wso2.apim.configurations.devportal.enableRatings }}
{{- end }}
{{- if .Values.wso2.apim.configurations.devportal.enableForum }}
enable_forum = {{ .Values.wso2.apim.configurations.devportal.enableForum }}
{{- end }}
{{- if .Values.wso2.apim.configurations.devportal.enableAnonymousMode }}
enable_anonymous_mode = {{ .Values.wso2.apim.configurations.devportal.enableAnonymousMode }}
{{- end }}
{{- if .Values.wso2.apim.configurations.devportal.enableCrossTenantSubscriptions }}
enable_cross_tenant_subscriptions = {{ .Values.wso2.apim.configurations.devportal.enableCrossTenantSubscriptions }}
{{- end }}
{{- if .Values.wso2.apim.configurations.devportal.loginUsernameCaseInsensitive }}
login_username_case_insensitive = {{ .Values.wso2.apim.configurations.devportal.loginUsernameCaseInsensitive }}
{{- end }}
{{- if .Values.wso2.apim.configurations.devportal.enableKeyProvisioning }}
enable_key_provisioning = {{ .Values.wso2.apim.configurations.devportal.enableKeyProvisioning }}
{{- end }}

[apim.cors]
enable = {{ .Values.wso2.apim.configurations.cors.enabled }}
allow_origins = {{ toJson .Values.wso2.apim.configurations.cors.allowOrigins }}
allow_methods = {{ toJson .Values.wso2.apim.configurations.cors.allowMethods }}
allow_headers = {{ toJson .Values.wso2.apim.configurations.cors.allowHeaders }}
allow_credentials = {{ .Values.wso2.apim.configurations.cors.allowCredentials }}
 
# Traffic Manager configurations
[apim.throttling]
service_url = "https://{{ .Values.wso2.apim.configurations.throttling.serviceUrl }}:{{ add 9443 .Values.wso2.apim.configurations.throttling.portOffset }}/services/"
{{- $len := add (len .Values.wso2.apim.configurations.throttling.urls) -1 }}
throttle_decision_endpoints = [{{ range $index, $element := .Values.wso2.apim.configurations.throttling.urls }}"tcp://{{ $element }}:{{ add 5672 $.Values.wso2.apim.configurations.throttling.portOffset }}"{{ if ne $index $len }},{{ end }}{{ end}}]
enable_unlimited_tier = {{ .Values.wso2.apim.configurations.throttling.unlimitedTier }}
enable_header_based_throttling = {{ .Values.wso2.apim.configurations.throttling.headerBasedThrottling }}
enable_jwt_claim_based_throttling = {{ .Values.wso2.apim.configurations.throttling.jwtClaimBasedThrottling }}
enable_query_param_based_throttling = {{ .Values.wso2.apim.configurations.throttling.queryParamBasedThrottling }}

{{ range $index, $url := .Values.wso2.apim.configurations.throttling.urls }}
[[apim.throttling.url_group]]
traffic_manager_urls = ["tcp://{{ $url }}:{{ add 9611 $.Values.wso2.apim.configurations.throttling.portOffset }}"]
traffic_manager_auth_urls = ["ssl://{{ $url }}:{{ add 9711 $.Values.wso2.apim.configurations.throttling.portOffset }}"]
type = "loadbalance"
{{ end }}

{{- if .Values.wso2.apim.configurations.throttling.blacklistCondition.enabled }}
[apim.throttling.blacklist_condition]
{{- if .Values.wso2.apim.configurations.throttling.blacklistCondition.startDelay }}
start_delay = {{ .Values.wso2.apim.configurations.throttling.blacklistCondition.startDelay}}
{{- end }}
{{- if .Values.wso2.apim.configurations.throttling.blacklistCondition.period }}
period = {{ .Values.wso2.apim.configurations.throttling.blacklistCondition.period}}
{{- end }}
{{- end }}
{{- println}}

{{- if .Values.wso2.apim.configurations.throttling.jms.startDelay }}
[apim.throttling.jms]
start_delay = {{ .Values.wso2.apim.configurations.throttling.jms.startDelay}}
{{- end }}

{{- if .Values.wso2.apim.configurations.workflow.enabled }}
[apim.workflow]
enable = {{ .Values.wso2.apim.configurations.workflow.enabled }}
service_url = {{ .Values.wso2.apim.configurations.workflow.serviceUrl | quote }}
callback_endpoint = {{ .Values.wso2.apim.configurations.workflow.callbackEndpoint | quote }}
token_endpoint = {{ .Values.wso2.apim.configurations.workflow.tokenEndpoint | quote }}
client_registration_endpoint = {{ .Values.wso2.apim.configurations.workflow.clientRegistrationEndpoint | quote }}
client_registration_username = {{ .Values.wso2.apim.configurations.workflow.clientRegistrationUsername | quote }}
{{- if .Values.wso2.apim.secureVaultEnabled }}
client_registration_password = "$secret{client_registration_password}"
{{- else }}
client_registration_password = {{ .Values.wso2.apim.configurations.workflow.clientRegistrationPassword | quote }}
{{- end }}
{{- end }}
{{- println }}

{{- if .Values.wso2.apim.configurations.transport.receiver.enable }}
# Data Bridge Configuration
[transport.receiver]
type = {{ .Values.wso2.apim.configurations.transport.receiver.type }}
worker_threads = {{ .Values.wso2.apim.configurations.transport.receiver.workerThreads }}
session_timeout = {{ .Values.wso2.apim.configurations.transport.receiver.sessionTimeout | quote }}
keystore.file_name = "$ref{keystore.tls.file_name}"
keystore.password = "$ref{keystore.tls.password}"
tcp_port = {{ .Values.wso2.apim.configurations.transport.receiver.tcpPort }}
ssl_port = {{ .Values.wso2.apim.configurations.transport.receiver.sslPort }}
ssl_enabled_protocols = [{{- .Values.wso2.apim.configurations.transport.receiver.sslEnabledProtocols | join "\",\"" }}]
ciphers = [{{- .Values.wso2.apim.configurations.transport.receiver.ciphers | join "\",\"" }}]
{{- end }}

{{- if .Values.wso2.apim.configurations.notification.hostname }}
[apim.notification]
from_address = {{ .Values.wso2.apim.configurations.notification.fromAddress | quote }}
username = {{ .Values.wso2.apim.configurations.notification.username | quote }}
{{- if .Values.wso2.apim.secureVaultEnabled }}
password = "$secret{notification_password}"
{{- else }}
password = {{ .Values.wso2.apim.configurations.notification.password | quote }}
{{- end }}
hostname = {{ .Values.wso2.apim.configurations.notification.hostname | quote }}
port = {{ .Values.wso2.apim.configurations.notification.port | quote  }}
enable_start_tls = {{ .Values.wso2.apim.configurations.notification.enableStartTls | quote }}
enable_authentication = {{ .Values.wso2.apim.configurations.notification.enableAuthentication | quote }}
{{- end }}

{{ range $index, $url := .Values.wso2.apim.configurations.resourceAccessControl }}
[[resource.access_control]]
context = {{ .context | quote }}
secure = {{ .secure }}
http_method = {{ .httpMethod | quote }}
{{- if .permissions }}
permissions = {{ .permissions | quote }}
{{ end }}
{{ end }}

{{- range .Values.wso2.apim.configurations.eventHandlers }}
[[event_handler]]
name = "{{ .name }}"
{{- $len := add (len .subscriptions) -1 }}
subscriptions = [{{ range $index, $element := .subscriptions }}"{{ $element }}"{{ if ne $index $len }},{{ end }}{{ end}}]
{{- end }}

[service_provider]
sp_name_regex = {{ .Values.wso2.apim.configurations.serviceProvider.spNameRegex | quote }}

{{- if not .Values.wso2.apim.configurations.iskm.enabled }}
{{ range .Values.wso2.apim.configurations.eventListeners }}
[[event_listener]]
id = "{{ .id }}"
type = "{{ .type }}"
name = "{{ .name }}"
order = {{ .order }}

[event_listener.properties]
notification_endpoint = "https://{{ template "apim-helm-cp.resource.prefix" . }}-service:${mgt.transport.https.port}/internal/data/v1/notify"
username = "${admin.username}"
password = "${admin.password}"
'header.X-WSO2-KEY-MANAGER' = "default"
{{- end }}
{{- end }}

{{ if .Values.wso2.deployment.persistence.solrIndexing.enabled }}
[database.local]
url = "jdbc:h2:/home/wso2carbon/solr/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE"

[indexing]
location = "/home/wso2carbon/solr/indexed-data"
{{ else }}

[database.local]
url = "jdbc:h2:./repository/database/WSO2CARBON_DB;DB_CLOSE_ON_EXIT=FALSE"
{{ end }}

{{- if .Values.wso2.apim.secureVaultEnabled }}
[secrets]
admin_password = {{ .Values.wso2.apim.configurations.adminPassword | quote }}
{{- if .Values.wso2.apim.configurations.security.keystores.primary.enabled }}
keystore_password = {{ .Values.wso2.apim.configurations.security.keystores.primary.password | quote }}
keystore_key_password = {{ .Values.wso2.apim.configurations.security.keystores.primary.keyPassword | quote }}
{{ end }}
{{- if .Values.wso2.apim.configurations.security.keystores.tls.enabled }}
ssl_keystore_password = {{ .Values.wso2.apim.configurations.security.keystores.tls.password | quote }}
ssl_keystore_key_password = {{ .Values.wso2.apim.configurations.security.keystores.tls.keyPassword | quote }}
{{ end }}
{{- if .Values.wso2.apim.configurations.security.keystores.internal.enabled }}
internal_keystore_password = {{ .Values.wso2.apim.configurations.security.keystores.internal.password | quote }}
internal_keystore_key_password = {{ .Values.wso2.apim.configurations.security.keystores.internal.keyPassword | quote }}
{{ end }}
truststore_password = {{ .Values.wso2.apim.configurations.security.truststore.password | quote }}
apim_db_password = {{ .Values.wso2.apim.configurations.databases.apimDB.password | quote }}
shared_db_password = {{ .Values.wso2.apim.configurations.databases.sharedDB.password | quote}}
{{- if .Values.wso2.apim.configurations.notification.hostname }}
notification_password = {{ .Values.wso2.apim.configurations.notification.password | quote }}
{{- end }}
{{- if .Values.wso2.apim.configurations.workflow.enabled }}
client_registration_password = {{ .Values.wso2.apim.configurations.workflow.clientRegistrationPassword | quote }}
{{- end }}
{{- end }}